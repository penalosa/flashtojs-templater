{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Dictionary.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import interact from \"interactjs\";\n  import { onMount } from \"svelte\";\n  let content =\n    \"Build words relating to the esophagus by dragging an appropriate suffix into a medical term box:\";\n  let height = \"18\";\n  let source = [\n    [\"Removal of the esophagus\", \"Esophag-\", \"-ectomy\"],\n    [\"Inflammation of the esophagus\", \"Esophag-\", \"-itis\"],\n    [\"Incision into the esophagus\", \"Esophago-\", \"-tomy\"],\n    [\"Instrument to view the esophagus\", \"Esophago-\", \"-scope\"],\n    [\"Protrusion/Hernia of the esophagus\", \"Esophago-\", \"-cele\"],\n    [\"Disease of the esophagus\", \"Esophago-\", \"-pathy\"],\n    [\"Opening into the esophagus\", \"Esophago-\", \"-stomy\"]\n  ];\n\n  let suffixes = source.map(s => s[2]);\n  $: els = Object.fromEntries(suffixes.map(s => [s, null]));\n  $: elsOffset = Object.fromEntries(suffixes.map(s => [s, { x: 0, y: 0 }]));\n  let dropzoneClasses = Object.fromEntries(suffixes.map(s => [s, []]));\n  let dropzoneComplete = Object.fromEntries(suffixes.map(s => [s, false]));\n  const reset = () => {\n    suffixes = source.map(s => s[2]);\n    dropzoneClasses = Object.fromEntries(suffixes.map(s => [s, []]));\n    dropzoneComplete = Object.fromEntries(suffixes.map(s => [s, false]));\n  };\n  onMount(() => {\n    interact(\".draggable\").draggable({\n      //   inertia: true,\n      autoScroll: true,\n      listeners: {\n        start(event) {\n          console.log(event.type, event.target);\n          event.target.style.transition = \"\";\n        },\n        move(event) {\n          const suffix = event.target.id;\n          elsOffset[suffix].x += event.dx;\n          elsOffset[suffix].y += event.dy;\n        },\n        end(event) {\n          if (event.target) {\n            const suffix = event.target.id;\n            event.target.style.transition = \"transform 0.2s\";\n            elsOffset[suffix].x = 0;\n            elsOffset[suffix].y = 0;\n          }\n        }\n      }\n    });\n    interact(\".dropzone\").dropzone({\n      accept: \".draggable\",\n      overlap: 0.75,\n      ondragenter: function(event) {\n        const suffix = \"-\" + event.target.id.split(\"-\")[1];\n        console.log(suffix);\n        if (!dropzoneComplete[suffix]) {\n          dropzoneClasses[suffix] = [\"drop-active\"];\n        }\n\n        console.log(dropzoneClasses);\n      },\n\n      ondragleave: function(event) {\n        const suffix = \"-\" + event.target.id.split(\"-\")[1];\n        if (!dropzoneComplete[suffix]) {\n          dropzoneClasses[suffix] = [];\n        }\n      },\n      ondrop: function(event) {\n        const suffix = \"-\" + event.target.id.split(\"-\")[1];\n        if (!dropzoneComplete[suffix]) {\n          if (suffix == event.relatedTarget.id) {\n            suffixes = suffixes.filter(s => s != suffix);\n            dropzoneClasses[suffix] = [\"success\"];\n            dropzoneComplete[suffix] = true;\n          } else {\n            dropzoneClasses[suffix] = [\"wrong\"];\n            setTimeout(() => (dropzoneClasses[suffix] = []), 1000);\n          }\n        }\n      }\n    });\n    height = \"0\";\n    setTimeout(() => (height = `${title.scrollHeight}px`), 0);\n  });\n  let title;\n  let preview = false;\n</script>\n\n<style>\n  .draggable {\n    touch-action: none;\n    user-select: none;\n  }\n  .drop-active {\n    background: #29e;\n  }\n</style>\n\n<div class=\"block\">\n  <div class=\"content\">\n    <textarea\n      rows=\"1\"\n      class=\"h2\"\n      bind:this={title}\n      bind:value={content}\n      placeholder=\"Title...\"\n      on:input={e => {\n        height = '0px';\n        setTimeout(() => (height = `${e.target.scrollHeight}px`), 0);\n      }}\n      style={`height:${height}`} />\n    <div class=\"spacing\">\n      {#if !preview}\n        {#each suffixes as suffix}\n          <span\n            id={suffix}\n            style=\"transform: translate({elsOffset[suffix].x}px, {elsOffset[suffix].y}px)\"\n            class=\"suffix draggable\"\n            bind:this={els[suffix]}\n            draggable=\"true\"\n            on:dragstart={e => {\n              e.dataTransfer.setData('text/plain', suffix);\n            }}>\n            {suffix}\n          </span>\n        {/each}\n      {/if}\n    </div>\n    <div class=\"answers\">\n      {#each source as answer}\n        <div\n          class={`box dropzone ${dropzoneClasses[answer[2]].join(' ')}`}\n          id=\"box{answer[2]}\">\n          <h3 class=\"subtitle\">{answer[0]}</h3>\n          <p class=\"match\">\n            {dropzoneComplete[answer[2]] || preview ? answer[1].slice(0, -1) + answer[2].slice(1) : answer[1]}\n          </p>\n        </div>\n      {/each}\n    </div>\n    <div class=\"controls\">\n      <button class=\"reset\" on:click={reset}>Reset</button>\n      <button class=\"show-answers\" on:click={() => (preview = !preview)}>\n        {preview ? 'Hide answers' : 'Show answers'}\n      </button>\n    </div>\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AA2FE,UAAU,eAAC,CAAC,AACV,YAAY,CAAE,IAAI,CAClB,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,YAAY,eAAC,CAAC,AACZ,UAAU,CAAE,IAAI,AAClB,CAAC"
}